apply plugin: 'com.android.application'

android {
    //useLibrary 'org.apache.http.legacy'


    compileSdkVersion 21

    defaultConfig {
        applicationId "org.proxydroid"
        minSdkVersion 16
        targetSdkVersion 21
        versionCode 61
        versionName "2.7.7"

        ndk {
            abiFilters 'armeabi-v7a'//,'x86', 'x86_64'
        }
    }



    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Application.mk'

        }
    }

    sourceSets {
        main {
            jni.srcDirs=[]
            jniLibs.srcDirs 'src/main/libs' //so out path
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.google.android.gms:play-services-ads-lite:9.2.0'
    compile 'com.flurry.android:analytics:6.4.0'
    compile 'com.j256.ormlite:ormlite-core:4.41'
    compile 'com.j256.ormlite:ormlite-android:4.41'
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    compile('com.googlecode.json-simple:json-simple:1.1.1'){
        exclude group: 'junit', module: 'junit'
    }
    compile 'org.mozilla:rhino:1.7R2_android'
}



task ndkBuild(type:Exec){
    workingDir file('src/main/jni') //指明jni文件夹在哪里
    commandLine getNdkBuildCmd(), 'V=1'
}


tasks.withType(JavaCompile){
    compileTask -> compileTask.dependsOn ndkBuild
}


task cleanJni(type:Exec){
    workingDir file('src/main/jni')
    commandLine getNdkBuildCmd(), 'clean'
}


clean.dependsOn cleanJni



def getNdkPath (){
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException('NDK location not found. Define location with ndk.dir in the local.properties file.')

    return ndkdir
}

def getNdkBuildCmd (){

    def ndkbuild = getNdkPath() + "/ndk-build"

    return ndkbuild
}
